server {
    listen 443 ssl;
    server_name meme.363-283.io;
    ssl on;
    error_log   /dev/stdout debug;

    # This configuration mirrors Gatekeeper config in MEME.
    location ~ ^/apps/(?<appname>[a-zA-Z0-9\-]+)/?(.*)$ {
        root /etc/nginx/apps;
        rewrite ^(/apps/)([a-zA-Z0-9\-]+)/(.*) /$appname/$3 break;
        expires 7d;
        add_header Cache-Control "public";
        try_files $uri $uri/index.html /$appname/index.html $appname/index.html;
    }

    location /services/dictionary/2.5 {
        proxy_pass       https://meme.363-283.io/services/dictionary/2.5;
        proxy_set_header USER_DN    $ssl_client_s_dn;
        proxy_set_header Host       $host;
        proxy_set_header X-Real-IP  $remote_addr;
    }

    location /services/wisard-etl/1.2 {
        proxy_pass                  http://${ETL_SERVICE_URL}:${ETL_SERVICE_PORT};
        proxy_set_header USER_DN    $ssl_client_s_dn;
        proxy_set_header Host       $host;
        proxy_set_header X-Real-IP  $remote_addr;
    }

    location /services/user/1.1 {
        proxy_pass       https://meme.363-283.io/services/user/1.1;
        proxy_set_header USER_DN    $ssl_client_s_dn;
        proxy_set_header Host       $host;
        proxy_set_header X-Real-IP  $remote_addr;
    }

    location /services/aac/1.2 {
        proxy_pass       https://meme.363-283.io/services/aac/1.2;
        proxy_set_header USER_DN    $ssl_client_s_dn;
        proxy_set_header Host       $host;
        proxy_set_header X-Real-IP  $remote_addr;
    }

    location /services/ess/1.2 {
        proxy_pass       https://meme.363-283.io/services/ess/1.2;
        proxy_set_header USER_DN    $ssl_client_s_dn;
        proxy_set_header Host       $host;
        proxy_set_header X-Real-IP  $remote_addr;
    }

    location /services/object-drive/1.0 {
        proxy_pass       https://meme.363-283.io/services/object-drive/1.0;
        proxy_set_header USER_DN    $ssl_client_s_dn;
        proxy_set_header Host       $host;
        proxy_set_header X-Real-IP  $remote_addr;
    }

    location /pkiNotFound {
        root /opt/;
        try_files $uri /static/html/nopkifound.html;
    }

    location /unauthorized/ {
        root /opt/;
        try_files $uri /static/html/unauthorized.html;
    }

    # No PKI Cert from the browser? Display an error page
    error_page 495 496 497 = @no_pki_cert;
    location @no_pki_cert {
        expires -1;
        internal;
        try_files $uri /pkiNotFound;
    }

    ssl_certificate /tmp/docker/pki/server.public;
    ssl_certificate_key /tmp/docker/pki/server.private;
    ssl_client_certificate /tmp/docker/pki/trusted.crt;
    ssl_trusted_certificate /tmp/docker/pki/trusted.crt;
    ssl_verify_depth 10;
    ssl_verify_client on;
    ssl_prefer_server_ciphers on;
    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers         HIGH:!aNULL:!MD5;

    # set client body size to 50M
    client_max_body_size 50M;
	  underscores_in_headers on;

    # other headers for service
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_pass_request_headers on;

    # SSL configs for connection to client, based on NGINX certificates
    # note: this sets SSL_CLIENT_S_DN header automatically
    proxy_ssl_name twl-server-generic2;
    proxy_ssl_certificate         /tmp/docker/pki/server.public;
    proxy_ssl_certificate_key     /tmp/docker/pki/client.crt;
    proxy_ssl_trusted_certificate /tmp/docker/pki/trusted.crt;
    proxy_ssl_verify_depth  10;
    proxy_ssl_verify        on;
    proxy_ssl_session_reuse on;
    proxy_ssl_protocols           TLSv1 TLSv1.1 TLSv1.2;
    proxy_ssl_ciphers 'ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:EC
DHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:A
ES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4';
	  set $ssl_client_s_dn_value $ssl_client_s_dn;
}
